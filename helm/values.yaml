# Default values for amazee.ai
# This is a YAML-formatted file.

# Global configuration
global:
  environment: production

# PostgreSQL configuration (using Bitnami chart)
postgresql:
  # Set to false to use external managed PostgreSQL
  enabled: true
  auth:
    postgresPassword: "postgres"
    database: "postgres_service"
  primary:
    persistence:
      enabled: true
      storageClass: "standard"
      size: "10Gi"
    extraEnvVars:
      - name: POSTGRES_INITDB_ARGS
        value: "--data-checksums"

# Backend subchart configuration
backend:
  enabled: true
  replicas: 1
  image:
    repository: ghcr.io/amazeeio/amazee.ai-backend
    tag: "main"
    pullPolicy: IfNotPresent
  # Database configuration - set based on postgresql configuration
  # The DATABASE_URL will be automatically generated using the release name
  # Format: postgresql://postgres:{password}@{release-name}-postgresql:5432/{database}
  database:
    url: ""  # Leave empty to auto-generate based on release name and PostgreSQL config
  # Application configuration
  secretKey: "my-secret-key"  # Key used to hash passwords stored in the database
  stripeSecretKey: "sk_test_your_stripe_secret_key"
  webhookSig: ""  # Only needed for local development with Stripe CLI
  awsAccessKeyId: "your_aws_access_key"
  awsSecretAccessKey: "your_aws_secret_key"
  enableMetrics: "true"
  dynamodbRegion: "us-east-1"
  sesRegion: "us-east-1"
  sesSenderEmail: "noreply@amazee.ai"
  enableLimits: "true"
  envSuffix: ""
  passwordlessSignIn: "true"
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Frontend subchart configuration
frontend:
  enabled: true
  replicas: 1
  image:
    repository: ghcr.io/amazeeio/amazee.ai-frontend
    tag: "main"
    pullPolicy: IfNotPresent
  apiUrl: ""  # Will be auto-generated using release name and backend service
  stripePublishableKey: "pk_test_your_stripe_publishable_key"
  passwordlessSignIn: "true"
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# Ingress configuration for backend API
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # Disable SSL redirect for local testing
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"  # Disable SSL redirect for local testing
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
  hosts:
    - host: api.amazee-ai.local
      paths:
        - path: /
          pathType: Prefix
          port: 8800
  tls: []  # Disable TLS for local testing

# Ingress configuration for frontend web interface
frontendIngress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # Disable SSL redirect for local testing
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"  # Disable SSL redirect for local testing
  hosts:
    - host: amazee-ai.local
      paths:
        - path: /
          pathType: Prefix
          port: 3000
  tls: []  # Disable TLS for local testing