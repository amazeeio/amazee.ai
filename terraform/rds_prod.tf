module "rds_aurora_prod" {
  source  = "terraform-aws-modules/rds-aurora/aws"
  version = "~> 9.0" # Specify a version constraint

  count = terraform.workspace == "main" ? 1 : 0

  name                   = "amazeeai-us2-vectordb2"
  engine                 = "aurora-postgresql"
  engine_version         = "16.4"
  engine_mode            = "provisioned"
  availability_zones     = ["eu-central-2a", "eu-central-2b", "eu-central-2c"]
  storage_encrypted      = true

  master_username        = "postgres"
  # master_password will be generated by Secrets Manager by default if not provided

  manage_master_user_password = true
  manage_master_user_password_rotation = false

  vpc_id                 = module.vpc.vpc_id
  db_subnet_group_name   = module.vpc.database_subnet_group_name

  security_group_rules = {
    vpc_ingress = {
      cidr_blocks = module.vpc.private_subnets_cidr_blocks
    }
  }


  # Instance configuration
  # The module creates instances based on this map. The key is a logical name for the instance.
  instances = {
    instance1 = {
      instance_class      = "db.serverless" # From aws_db_instance.instance_class
      publicly_accessible = true            # From aws_db_instance.publicly_accessible
    }
    instance2 = {
      instance_class      = "db.serverless" # From aws_db_instance.instance_class
      publicly_accessible = true            # From aws_db_instance.publicly_accessible
    }
  }

  serverlessv2_scaling_configuration = {
    min_capacity = 2
    max_capacity = 16
    # seconds_until_auto_pause is not a direct parameter here, often controlled via cluster params or not applicable to v2 in the same way
  }


  # Backup and Maintenance
  backup_retention_period    = 7
  preferred_backup_window    = "06:42-07:12"
  preferred_maintenance_window = "wed:04:35-wed:05:05" # From cluster
  # instance_maintenance_window = "mon:10:17-mon:10:47" # From instance, module might not support separate instance maintenance window like this. Typically cluster-wide.

  # Monitoring and Performance Insights
  monitoring_interval                   = 60    # From aws_rds_cluster and aws_db_instance
  create_monitoring_role                = true

  performance_insights_enabled          = true
  performance_insights_retention_period = 7

  # DB Cluster Parameter Group
  db_cluster_parameter_group_name = "default.aurora-postgresql16"
  create_db_cluster_parameter_group = false

  # DB Parameter Group (for instances)
  db_parameter_group_name = "default.aurora-postgresql16" # From aws_db_instance.parameter_group_name
  create_db_parameter_group = false


  # Tags and other settings
  copy_tags_to_snapshot               = true
  deletion_protection                 = true
  iam_database_authentication_enabled = false
  network_type                        = "IPV4"
  enable_http_endpoint                = false # For Data API, usually for serverless


  # Instance specific from aws_db_instance that map to module instance settings or cluster settings:
  auto_minor_version_upgrade = true # module default is often true

}

data "aws_availability_zones" "available" {}

locals {
  vpc_cidr                     = "10.10.0.0/16"
  azs                          = slice(data.aws_availability_zones.available.names, 0, 3)
}


module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 5.0"

  name = "amazeeai-us2-vectordb-vpc"
  cidr = local.vpc_cidr

  azs              = local.azs
  public_subnets   = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k)]
  private_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 3)]
  database_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 6)]

}